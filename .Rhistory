devtools::document()
devtools::check()
usethis::use_package('stringr')
?str_split
devtools::load_all()
devtools::document()
devtools::check()
usethis::use_r('Get_GSEA')
usethis::use_package('msigdf')
install.packages('msigdf')
BiocManager::install('msigdf')
species=='h'
c2 <- msigdf.human %>% filter(category_code == category) %>% dplyr::select(geneset, symbol ) %>% as.data.frame
msigdf.human
library(msigdf)
devtools::install_github("toledoem/msigdf")
c2 <- msigdf.human %>% filter(category_code == category) %>% dplyr::select(geneset, symbol ) %>% as.data.frame
msigdf.human
library(msigdf)
c2 <- msigdf.human %>% filter(category_code == category) %>% dplyr::select(geneset, symbol ) %>% as.data.frame
category = 'c2'
c2 <- msigdf.human %>% filter(category_code == category) %>% dplyr::select(geneset, symbol ) %>% as.data.frame
c2
input.file <- system.file('extdata','GO_enrich.csv',package = 'LIANLAB')
markers <- read.csv(input.file,header = T, row.names = 1)
object = markers
rownames(object)
input.file <- system.file('extdata','DEG.csv',package = 'LIANLAB')
markers <- read.csv(input.file,header = T, row.names = 1)
object = markers
category = 'c2'
rownames(object)
object$avg_logFC
genelist=data.frame(rownames(object),object$avg_logFC)
colnames(genelist)[1]='SYMBOL'
colnames(genelist)[2]='avg_logFC'
genelist
de <- genelist[,1]
de = as.character(de)
de
x <- enricher(de$SYMBOL, TERM2GENE = c2, pvalueCutoff = p.valueCutoff)
?enricher
library(clusterProfiler)
x <- enricher(de$SYMBOL, TERM2GENE = c2, pvalueCutoff = p.valueCutoff)
x <- enricher(de$SYMBOL, TERM2GENE = c2, pvalueCutoff = 0.05)
de
x <- enricher(de, TERM2GENE = c2, pvalueCutoff = p.valueCutoff)
pvalueCutoff=0.05
x <- enricher(de, TERM2GENE = c2, pvalueCutoff = p.valueCutoff)
p.valueCutoff=0.05
x <- enricher(de, TERM2GENE = c2, pvalueCutoff = p.valueCutoff)
x
head(genelist)
head(de)
head(genelist)
de1 <- as.numeric(genelist1[,2])
names(de1) = genelist1[,1]
head(genelist)
de1 <- as.numeric(genelist$avg_logFC)
names(de1) = genelist$SYMBOL
de1 = sort(de1,decreasing = T)
y <- GSEA(de1, TERM2GENE = c2, verbose=FALSE, pvalueCutoff = p.valueCutoff)
y
?bitr
?enricher
devtools::document()
devtools::check()
usethis::use_package('msigdf')
devtools::document()
devtools::check()
?msigdf.human
msigdf.human
class(msigdf.human)
msigdf.human
save(msigdf.human,file = 'E:/lianlab/bio_info/LIANLAB/inst/extdata/msigdf.human.RData')
msigdf.mouse
save(msigdf.mouse,file = 'E:/lianlab/bio_info/LIANLAB/inst/extdata/msigdf.mouse.RData')
devtools::load_all()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
?category_code
??category_code
?GSEA
?gseaplot2
?gseaplot
data("colorful",package = 'LIANLAB')
colorful[["colors"]]
?msigdf
??msigdf
library(msigdf)
usethis::use_package('msigdf')
msigdf::msigdf.human
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
library(msigdf)
msigdf::msigdf.human
devtools::install_github("toledoem/msigdf", build_vignettes = TRUE)
devtools::install_github("toledoem/msigdf", build_vignettes = TRUE,force = T)
BiocManager::install('BiocStyle')
devtools::install_github("toledoem/msigdf", build_vignettes = TRUE,force = T)
usethis::use_r('Get_heatmap')
system.file('extdata','pbmc_small.RDS',package = 'LIANLABDATA')
input.file <- system.file('extdata','pbmc_small.RDS',package = 'LIANLABDATA')
load(input.file)
pbmc_small
pbmc_small[genes,]
genes = c('CD8A','CD3','CD4')
pbmc_small[genes,]
rownames(pbmc_small)
devtools::document()
BiocManager::install('xfun')
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
?cluster_annotate
data(common_cluster,package="LIANLAB")
input.file <- system.file('extdata','pbmc_small.RDS',package = 'LIANLABDATA')
load(input.file)
pbmc_small <- cluster_annotate( pbmc_small, cluster_markers = common_cluster)
pbmc_small <- cluster_annotate( pbmc_small, cluster_markers = common_cluster)
load('E:/lianlab/bio_info/pbmc_3k.RData')
DimPlot(pbmc,reduction = 'tsne')
pbmc
DimPlot(pbmc,reduction = 'umap')
pbmc <- pbmc[,sample(colnames(pbmc),1000)]
saveRDS(pbmc,file = 'pbmc_1k.RDS')
pbmc <- pbmc[,sample(colnames(pbmc),900)]
saveRDS(pbmc,file = 'pbmc_1k.RDS')
devtools::install_github("Lian-Lab/LIANLABDATA")
data(common_cluster,package="LIANLABDATA")
data(common_cluster,package="LIANLAB")
library(LIANLAB)
data(common_cluster,package="LIANLAB")
input.file <- system.file('extdata','pbmc_1k.RDS',package = 'LIANLABDATA')
load(input.file)
input.file
pbmc_1k <- readRDS(input.file)
pbmc_small <- cluster_annotate( pbmc_1k, cluster_markers = common_cluster)
pbmc_1k
rownames(pbmc_1k)
levels(pbmc_1k)
seurat_object = pbmc_1k
cluster_markers = common_cluster
if(is.null(cluster_markers)){
stop("There is no cluster markers supply !!")
}
annotation_target <- names(cluster_markers)
clustermean <- NULL
seurat_violin <- seurat_object
for (i in 1:length(cluster_markers)) {
choose <- subset(seurat_object,features=cluster_markers[[i]])
df <- as.data.frame(choose@assays$RNA@data)
score <- apply(df, 2, mean)
clustermean <- rbind(clustermean,tapply(score,Idents(choose),mean))
row.names(clustermean)[nrow(clustermean)] <- annotation_target[i]
seurat_violin$score <- as.numeric(score)
colnames(seurat_violin@meta.data)[ncol(seurat_violin@meta.data)] <- annotation_target[i]
}
?Idents
library(Seurat)
for (i in 1:length(cluster_markers)) {
choose <- subset(seurat_object,features=cluster_markers[[i]])
df <- as.data.frame(choose@assays$RNA@data)
score <- apply(df, 2, mean)
clustermean <- rbind(clustermean,tapply(score,Idents(choose),mean))
row.names(clustermean)[nrow(clustermean)] <- annotation_target[i]
seurat_violin$score <- as.numeric(score)
colnames(seurat_violin@meta.data)[ncol(seurat_violin@meta.data)] <- annotation_target[i]
}
annotation <- row.names(clustermean)[apply(clustermean, 2, which.max)]
for (i in 1:length(annotation)) {
j <- as.numeric(apply(clustermean, 2, which.max)[i])
if(clustermean[j,i]<0.5){
annotation[i] <- "Unknown"
}
}
if(is.null(n_col)){
n_col <- ceiling(30/length(levels(seurat_object)))
}
n_col = NULL
if(is.null(n_col)){
n_col <- ceiling(30/length(levels(seurat_object)))
}
n_row <- ceiling(length(annotation_target)/ncol)
n_col
ncol
#' @return a seurat.obj with annotation
#' @export
#'
#' @examples
#' \dontrun{
#' data(common_cluster,package="LIANLAB")
#' input.file <- system.file('extdata','pbmc_1k.RDS',package = 'LIANLABDATA')
#' pbmc_1k <- readRDS(input.file)
#' pbmc_1k <- cluster_annotate( seurat_object = pbmc_1k, cluster_markers = common_cluster)
#' }
cluster_annotate = function(seurat_object,cluster_markers = NULL,filename = "",width = 4,height = 2.5,n_col = NULL){
if(is.null(cluster_markers)){
stop("There is no cluster markers supply !!")
}
annotation_target <- names(cluster_markers)
clustermean <- NULL
seurat_violin <- seurat_object
for (i in 1:length(cluster_markers)) {
choose <- subset(seurat_object,features=cluster_markers[[i]])
df <- as.data.frame(choose@assays$RNA@data)
score <- apply(df, 2, mean)
clustermean <- rbind(clustermean,tapply(score,Idents(choose),mean))
row.names(clustermean)[nrow(clustermean)] <- annotation_target[i]
seurat_violin$score <- as.numeric(score)
colnames(seurat_violin@meta.data)[ncol(seurat_violin@meta.data)] <- annotation_target[i]
}
annotation <- row.names(clustermean)[apply(clustermean, 2, which.max)]
for (i in 1:length(annotation)) {
j <- as.numeric(apply(clustermean, 2, which.max)[i])
if(clustermean[j,i]<0.5){
annotation[i] <- "Unknown"
}
}
if(is.null(n_col)){
n_col <- ceiling(30/length(levels(seurat_object)))
}
n_row <- ceiling(length(annotation_target)/n_col)
new.cluster.ids  <-  annotation
names(new.cluster.ids) <- levels(seurat_object)
seurat_object <- RenameIdents(seurat_object,new.cluster.ids)
pdf(paste0("annotation_violin_",filename,".pdf"),width = width*n_col,height = height*n_row)
p <- VlnPlot(seurat_violin,features = annotation_target,pt.size = 0,ncol = n_col)
print(p)
dev.off()
return(seurat_object)
}
pbmc_1k <- cluster_annotate( seurat_object = pbmc_1k, cluster_markers = common_cluster)
pbmc_1k@active.ident
setwd('E:/lianlab/bio_info/LIANLAB/0')
myfindmarkers(pbmc_small)
myfindmarkers(pbmc_1k)
#'
#' @return a list including two characters,top5 and top20
#' @export
#'
#' @examples
#' \dontrun{
#' input.file <- system.file('extdata','pbmc_1k.RDS',package = 'LIANLABDATA')
#' pbmc_1k <- readRDS(input.file)
#' top_genes <- myfindmarkers(pbmc_1k)
#' }
myfindmarkers = function(seurat_object,filename=NULL,thresh.use=0.25,species="human",all.markers=NULL,colors=NULL){
cluster <- avg_logFC <- gene <- NULL
if(is.null(all.markers)){
all.markers <- FindAllMarkers(object = seurat_object, only.pos = TRUE, min.pct = 0.25,
logfc.threshold = thresh.use)
}
top20 <- all.markers %>% group_by(cluster) %>% top_n(20, avg_log2FC)
top50 <- all.markers %>% group_by(cluster) %>% top_n(50, avg_log2FC)
write.csv(top20, paste0(filename,"_clustertop20_gene.csv"), row.names = F)
write.csv(top50, paste0(filename,"_clustertop50_gene.csv"), row.names = F)
if(species == "huamn"){
common_markers=c("CD3D","CD3E","CD8A","CD8B","CD4","CD14")
}else{
common_markers=c("Cd3d","Cd3e","Cd8a","Cd8b1","Cd4","Cd14")
}
if(length(grep(pattern = "TotalSeqC",rownames(seurat_object)))>0){
antibody_name <- rownames(seurat_object)[grep(pattern = "TotalSeqC",rownames(seurat_object))]
common_markers <- c(common_markers,antibody_name)
}
non_common <- setdiff(unique(as.character(all.markers$gene)),common_markers)
all.markers <- subset(all.markers,gene%in%non_common)
top5 <- all.markers %>% group_by(cluster) %>% top_n(5, avg_log2FC)
top20 <- all.markers %>% group_by(cluster) %>% top_n(20, avg_log2FC)
heatgene <- unique(as.character(top20$gene))
if(nrow(seurat_object@assays$RNA@scale.data)==0){
SeuratObject::DefaultAssay(seurat_object)="RNA"
seurat_object <- ScaleData(seurat_object)
}
ave_cluster <- AverageExpression(seurat_object,assays = "RNA",slot = "data",return.seurat = T)
if (is.null(colors)) {
colorful <- LIANLAB::colorful
colors = colorful[["colors"]]
}
pdf(paste0("heatmap_",filename,"_top20.pdf"),width =15, height = 40)
f1 <- DoHeatmap(ave_cluster, features = heatgene,
label = TRUE,size=3,assay = "RNA",lines.width = 1,
group.colors = colors,draw.lines = F)+
scale_fill_gradientn(colors = rev(RColorBrewer::brewer.pal(n = 10, name = "RdBu")))
print(f1)
dev.off()
pdf(paste0("heatmap_",filename,"_top5.pdf"),width =15, height = 12)
f2 <- DoHeatmap(object = ave_cluster, features = unique(as.character(top5$gene)),
label = TRUE,size=3,group.colors = colors,draw.lines = F)+
scale_fill_gradientn(colors = rev(RColorBrewer::brewer.pal(n = 10, name = "RdBu")))
print(f2)
dev.off()
png(paste0("heatmap_",filename,"_top20.png"),width = 1500, height = 4000)
print(f1)
dev.off()
png(paste0("heatmap_",filename,"_top5.png"),width = 750/1.5, height = 600/1.5)
print(f2)
dev.off()
pdf(paste0("Dotplot_",filename,"_nolegend.pdf"),width =20, height = 5.18)
f3 <- DotPlot(object = seurat_object, features = rev(x = unique(top5$gene)), cols = c("blue","firebrick2"),
dot.scale = 5) + RotatedAxis()+NoLegend()
print(f3)
dev.off()
pdf(paste0("total_heatmap_",filename,"_top5.pdf"),width =15, height = 12)
f4 <- DoHeatmap(object = seurat_object, features = unique(top5$gene),
label = TRUE,size=3,group.colors = colors,draw.lines = T)+
scale_fill_gradientn(colors = rev(RColorBrewer::brewer.pal(n = 10, name = "RdBu")))
print(f4)
dev.off()
pdf(paste0("total_heatmap_",filename,"_top20.pdf"),width =15, height = 40)
f5 <- DoHeatmap(object = seurat_object, features = unique(top20$gene),
label = TRUE,size=3,group.colors = colors,draw.lines = T)+
scale_fill_gradientn(colors = rev(RColorBrewer::brewer.pal(n = 10, name = "RdBu")))
print(f5)
dev.off()
export <- list(top5=unique(as.character(top5$gene)),top20=unique(as.character(top20$gene)))
return(export)
}
myfindmarkers(pbmc_1k)
library(dplyr)
myfindmarkers(pbmc_1k)
library(ggplot2)
myfindmarkers(pbmc_1k)
system.file('extdata','DEG.csv',package = 'LIANLABDATA')
system.file('extdata','DEG.csv',package = 'LIANLABDATA')
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
test_package(c("org.Hs.eg.db",'org.Mm.eg.db','graphics','utils','DOSE'))
test_package(c("org.Hs.eg.db",'org.Mm.eg.db','graphics','utils','DOSE','aaa','bbb','ccc'))
#' To test the package need
#'
#' @param package_list the character of the test package
#'
#' @export
#'
#' @examples
#' \dontrun{
#' test_package(c('Seurat','DOSE'))
#' }
test_package = function(package_list){
i <- 1
while(i < length(package_list) + 1){
if (!requireNamespace(package_list[i], quietly = TRUE)) {
print(paste("Please install the package ",i))
}
i = i + 1
}
if (i == length(package_list)) {
stop('Please install the package.')
}
}
test_package(c("org.Hs.eg.db",'org.Mm.eg.db','graphics','utils','DOSE','aaa','bbb','ccc'))
#' To test the package need
#'
#' @param package_list the character of the test package
#'
#' @export
#'
#' @examples
#' \dontrun{
#' test_package(c('Seurat','DOSE'))
#' }
test_package = function(package_list){
i <- 1
while(i < length(package_list) + 1){
if (!requireNamespace(package_list[i], quietly = TRUE)) {
print(paste("Please install the package ",package_list[i]))
}
i = i + 1
}
if (i == length(package_list)) {
stop('Please install the package.')
}
}
test_package(c("org.Hs.eg.db",'org.Mm.eg.db','graphics','utils','DOSE','aaa','bbb','ccc'))
#' To test the package need
#'
#' @param package_list the character of the test package
#'
#' @export
#'
#' @examples
#' \dontrun{
#' test_package(c('Seurat','DOSE'))
#' }
test_package = function(package_list){
i <- 1
while(i < length(package_list) + 1){
if (!requireNamespace(package_list[i], quietly = TRUE)) {
print(paste("Please install the package",'"',package_list[i],'"'))
}
i = i + 1
}
if (i == length(package_list)) {
stop('Please install the package.')
}
}
test_package(c("org.Hs.eg.db",'org.Mm.eg.db','graphics','ddd','utils','DOSE','aaa','bbb','ccc'))
print(paste("Please install the package","'",package_list[i],"'"))
#' To test the package need
#'
#' @param package_list the character of the test package
#'
#' @export
#'
#' @examples
#' \dontrun{
#' test_package(c('Seurat','DOSE'))
#' }
test_package = function(package_list){
i <- 1
while(i < length(package_list) + 1){
if (!requireNamespace(package_list[i], quietly = TRUE)) {
print(paste("Please install the package","'",package_list[i],"'"))
}
i = i + 1
}
if (i == length(package_list)) {
stop('Please install the package.')
}
}
test_package(c("org.Hs.eg.db",'org.Mm.eg.db','graphics','ddd','utils','DOSE','aaa','bbb','ccc'))
#' To test the package need
#'
#' @param package_list the character of the test package
#'
#' @export
#'
#' @examples
#' \dontrun{
#' test_package(c('Seurat','DOSE'))
#' }
test_package = function(package_list){
i <- 1
while(i < length(package_list) + 1){
if (!requireNamespace(package_list[i], quietly = TRUE)) {
print(paste("Please install the package",package_list[i]))
}
i = i + 1
}
if (i == length(package_list)) {
stop('Please install the package.')
}
}
test_package(c("org.Hs.eg.db",'org.Mm.eg.db','graphics','ddd','utils','DOSE','aaa','bbb','ccc'))
usethis::use_package('GSVA','Suggests')
file.edit('DESCRIPTION')
usethis::use_package('GSVA','Suggests')
usethis::use_package('GSEABase','Suggests')
usethis::use_package('limma','Suggests')
test_package(c("monocle",'VGAM','BiocGenerics'))
usethis::use_package('monocle','Suggests')
usethis::use_package('VGAM','Suggests')
usethis::use_package('BiocGenerics','Suggests')
usethis::use_package('LIANLABDATA')
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
usethis::use_package('limma','Suggests')
usethis::use_package('org.Mm.eg.db','Suggests')
usethis::use_package('org.Hs.eg.db','Suggests')
usethis::use_package('stats','Suggests')
usethis::use_package('corrplot','Suggests')
usethis::use_package('future','Suggests')
usethis::use_package('graphics','Suggests')
usethis::use_package('GSVA','Suggests')
usethis::use_package('GSEABase','Suggests')
usethis::use_package('DOSE','Suggests')
usethis::use_package('monocle','Suggests')
usethis::use_package('VGAM','Suggests')
usethis::use_package('BiocGenerics','Suggests')
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
usethis::use_package('GSVA')
usethis::use_package('GSEABase')
usethis::use_package('DOSE')
usethis::use_package('monocle')
usethis::use_package('VGAM')
usethis::use_package('BiocGenerics')
file.edit('DESCRIPTION')
usethis::use_package('limma')
devtools::document()
devtools::load_all()
devtools::check()
# use_readme_rmd()和build_readme()生成readme文件
usethis::use_readme_rmd()
usethis::build_readme()
devtools::build_readme()
file.edit('DESCRIPTION')
devtools::document()
usethis::use_r('Get_GK')
devtools::document()
devtools::document()
system.file('extdata','human_gene_ensembl.rds',package = 'LIANLABDATA')
file.edit('DESCRIPTION')
